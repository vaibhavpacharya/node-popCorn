{
  // 0 - IGNORE
  // 1 - WARNING
  // 2 - ERROR
  "extends": "airbnb-base",
  "env": {
    "node": true, // Node.js global variables and Node.js-specific rules.
    "mocha": true
  },
  "rules": {
    "linebreak-style": 0,
    "comma-dangle": 0,
    "prefer-destructuring": [
      "error",
      {
        "array": false,
        "object": false
      }
    ],
    ////////// Airbnb Base Overrides //////////
    "no-restricted-syntax": 0,
    ////////// Best Practices //////////
    "block-scoped-var": 2, // treat var statements as if they were block scoped (off by default)
    "complexity": 2, // specify the maximum cyclomatic complexity allowed in a program (off by default)
    "consistent-return": 2, // require return statements to either always or never specify values
    "curly": 2, // specify curly brace conventions for all control statements
    "default-case": 2, // require default case in switch statements (off by default)
    "dot-notation": 2, // encourages use of dot notation whenever possible
    "eqeqeq": 2, // require the use of === and !==
    "guard-for-in": 2, // make sure for-in loops have an if statement (off by default)
    "no-alert": 2, // disallow the use of alert, confirm, and prompt
    "no-caller": 2, // disallow use of arguments.caller or arguments.callee
    "no-div-regex": 2, // disallow division operators explicitly at beginning of regular expression (off by default)
    "no-else-return": 2, // disallow else after a return in an if (off by default)
    "no-eq-null": 2, // disallow comparisons to null without a type-checking operator (off by default)
    "no-eval": 2, // disallow use of eval()
    "no-extend-native": 2, // disallow adding to native types
    "no-extra-bind": 2, // disallow unnecessary function binding
    "no-fallthrough": 2, // disallow fallthrough of case statements
    "no-floating-decimal": 2, // disallow the use of leading or trailing decimal points in numeric literals (off by default)
    "no-implied-eval": 2, // disallow use of eval()-like methods
    "no-iterator": 2, // disallow usage of __iterator__ property
    "no-labels": 2, // disallow use of labeled statements
    "no-lone-blocks": 2, // disallow unnecessary nested blocks
    "no-loop-func": 2, // disallow creation of functions within loops
    "no-multi-spaces": 2, // disallow use of multiple spaces
    "no-multi-str": 2, // disallow use of multiline strings
    "no-native-reassign": 2, // disallow reassignments of native objects
    "no-new": 2, // disallow use of new operator when not part of the assignment or comparison
    "no-new-func": 2, // disallow use of new operator for Function object
    "no-new-wrappers": 2, // disallows creating new instances of String, Number, and Boolean
    "no-octal": 2, // disallow use of octal literals
    "no-octal-escape": 2, // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    "no-process-env": 2, // disallow use of process.env (off by default)
    "no-proto": 2, // disallow usage of __proto__ property
    "no-redeclare": 2, // disallow declaring the same variable more then once
    "no-return-assign": 2, // disallow use of assignment in return statement
    "no-script-url": 2, // disallow use of javascript: urls.
    "no-self-compare": 2, // disallow comparisons where both sides are exactly the same (off by default)
    "no-sequences": 2, // disallow use of comma operator
    "no-unused-expressions": 2, // disallow usage of expressions in statement position
    "no-void": 2, // disallow use of void operator (off by default)
    "no-warning-comments": 2, // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
    "no-with": 2, // disallow use of the with statement
    "radix": 2, // require use of the second argument for parseInt() (off by default)
    "vars-on-top": 2, // requires to declare all vars on top of their containing scope (off by default)
    "wrap-iife": 2, // require immediate function invocation to be wrapped in parentheses (off by default)
    ////////// Strict Mode //////////
    "strict": 2, // controls location of Use Strict Directives
    ////////// Variables //////////
    "no-catch-shadow": 2, // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
    "no-delete-var": 2, // disallow deletion of variables
    ////////// Node.js //////////
    "handle-callback-err": 2, // enforces error handling in callbacks (off by default) (on by default in the node environment)
    "no-mixed-requires": 2, // disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
    "no-new-require": 2, // disallow use of new operator with the require function (off by default) (on by default in the node environment)
    "no-path-concat": 2, // disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
    "no-process-exit": 2, // disallow process.exit() (on by default in the node environment)
    "no-restricted-modules": 2, // restrict usage of specified node modules (off by default)
    "no-sync": 2, // disallow use of synchronous methods (off by default)
    "no-param-reassign": 0,
    ////////// Stylistic Issues //////////
    "brace-style": 2, // enforce one true brace style (off by default)
    "camelcase": 2, // require camel case names
    "comma-spacing": 2, // enforce spacing before and after comma
    "comma-style": 2, // enforce one true comma style (off by default)
    "consistent-this": 2, // enforces consistent naming when capturing the current execution context (off by default)
    "eol-last": 2, // enforce newline at the end of file, with no multiple empty lines
    "func-names": 0, // require function expressions to have a name (off by default)
    "func-style": 0, // enforces use of function declarations or expressions (off by default)
    "key-spacing": 2, // enforces spacing between keys and values in object literal properties
    "max-nested-callbacks": 2, // specify the maximum depth callbacks can be nested (off by default)
    "new-cap": 0, // require a capital letter for constructors
    "new-parens": 2, // disallow the omission of parentheses when invoking a constructor with no arguments
    "no-array-constructor": 2, // disallow use of the Array constructor
    "no-inline-comments": 0, // disallow comments inline after code (off by default)
    "no-lonely-if": 2, // disallow if as the only statement in an else block (off by default)
    "no-mixed-spaces-and-tabs": 2, // disallow mixed spaces and tabs for indentation
    "no-multiple-empty-lines": 2, // disallow multiple empty lines (off by default)
    "no-nested-ternary": 2, // disallow nested ternary expressions (off by default)
    "no-new-object": 2, // disallow use of the Object constructor
    "no-spaced-func": 2, // disallow space between function identifier and application
    "no-ternary": 0, // disallow the use of ternary operators (off by default)
    "no-trailing-spaces": 2, // disallow trailing whitespace at the end of lines
    "no-underscore-dangle": 0, // disallow dangling underscores in identifiers
    "no-extra-parens": 2, // disallow wrapping of non-IIFE statements in parens
    "one-var": 2, // allow just one var statement per function (off by default)
    "operator-assignment": 2, // require assignment operator shorthand where possible or prohibit it entirely (off by default)
    "padded-blocks": 2, // enforce padding within blocks (off by default)
    "quote-props": 2, // require quotes around object literal property names (off by default)
    "quotes": 2, // specify whether double or single quotes should be used
    "semi": 2, // require or disallow use of semicolons instead of ASI
    "space-after-function-name": 0, // require a space after function names (off by default)
    "space-after-keywords": 0, // require a space after certain keywords (off by default)
    "space-before-blocks": 2, // require or disallow space before blocks (off by default)
    "object-curly-spacing": 2, // require or disallow spaces inside brackets (off by default)
    "array-bracket-spacing": 2, // require or disallow spaces inside brackets (off by default)
    "space-in-parens": 2, // require or disallow spaces inside parentheses (off by default)
    "space-infix-ops": 2, // require spaces around operators
    "keyword-spacing": 2, // require a space after return, throw, and case
    "space-unary-ops": 2, // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
    "spaced-comment": 2, // require or disallow a space immediately following the // in a line comment (off by default)
    ////////// ECMAScript 6 //////////
    "no-var": 2, // require let or const instead of var (off by default)
    ////////// Legacy //////////
    "max-depth": 2, // specify the maximum depth that blocks can be nested (off by default)
    "max-len": 2, // specify the maximum length of a line in your program (off by default)
    // specify the maximum number of statement allowed in a function (off by default)
    "max-statements": [
      2,
      25,
      {
        "ignoreTopLevelFunctions": true
      }
    ],
  }
}